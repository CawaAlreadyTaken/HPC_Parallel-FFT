/*secondo modello dell'invio dei dati (codice non utilizzabile):

tentativo basilare per risolver l'uylizzo di troppi thread:
l'algoritmo effettua un numeo di chiamate sequenziali finchè ogni thread non ha i risultati che dovrebbe avere con la versione precedente

TO DO:
ogni passaggio metà dei thread diventano inutili --> fixare
Controllare se l'agoritmo funziona su array piccoli prima di provare ottimizzazioni (es: lunghezzza 16/32)

*/

const double PI = acos(-1);
using cd = complex<double>;

//CHANGE START HERE
void calc_new_input(*new_input){
  actual_red = log(pol.size) - log(numthreads) //quantità di passaggi che effettuiamo in sequenziale ( log ikn base 2 della lunghezza - log in base 2 del numero di thread)
  red = 1 //reduzione calcolata fin'ora
  index[] = {0, 2, 1, 3}
  while (red < actual_red){
  size = index.size();
    for i=0; i<size(); i++{
      index[i] *= 2;
      index[i] += id;
    }
    index.append(index[])
    for (i=size; i<index.size(); i++){
      index[i] +=   1;
      index[i] += id;
    }
  red++;
  }
  for (i=0; i< index.size(); i++){
    new_input[i] = pol[index[i]];
  }
//CHANGE STOP HERE

void calc_const(*w, *wn, *n, passage, invert){
    n = 2^passage;
    double ang = 2 * PI / n * (invert ? -1 : 1);
    w(1), wn(cos(ang), sin(ang));
}


int main(){
    passage = log(pol.size) - log(numthreads); //variabile per tenere traccia del numero di passaggi, ogni thread ne ha una
    pol[] = read_from_memory(input.txt) //leggere dalla memoria condivisa l'input e memorizzarlo in un array
    id = thread_num() // id = numero del thread
    numthread == ### //numero di thread richiesti al cluster (modificabile) -> idealmente lunghezza array / 2
    n = 2^passage
    a[] = new array() // array di numeri complessi

//CHANGE START HERE
    new_input[] = new array<cd> ()
    new_input[] = calc_new_input(&new_input) // input per la modalità sequenziale
    int target = pol.size() / numthread
    while (n < target ){
    fft(new_input) sequenziale
//CHANGE STOP HERE --> controllare se funziona con input piccoli
//necessità la versione sequenziale, probabilmente quella ricorsiva
  
    while (n <= pol.size()){ // continua finchè non hai finito, ovvero in un thread hai tutti i risultati parziali
            for (i=0; 2*i < n; i++){
                a[i] = a[i] + w * prec[i];
                a[i+n/2] = a[i] - w* prec[i]
                if (invert) {
                    a[i] /= 2;
                    a[i + n/2] /= 2;
                }
                w *= wn
            }

            if (id >= numthread/n ){
                send to id - (numthread/n) a[] as prec[] //invia al thread il tuo risultato come array
                stop_thread() // queso thread ha smesso di fare quello che deve fare
            }else{
                receive prec[] //aspetta il risultato da un altro thread
            }
            calc_const();
        }
    }

    // a[] dovrebbe contenere il risultato finale

    return 0;
}
